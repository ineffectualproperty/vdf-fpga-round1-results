#!/usr/bin/python3

from random import getrandbits


N = 124066695684124741398798927404814432744698427125735684128131855064976895337309138910015071214657674309443149407457493434579063840841220334555160125016331040933690674569571217337630239191517205721310197608387239846364360850220896772964978569683229449266819903414117058030106528073928633017118689826625594484331


###############################################
# Define these parameters
LOGNUMSYMBOLS = 5;
LOGRADIX = 33;
MODULUS = N;
###############################################

####################################################################################
# Specify Number to Modulo
#    Number is concatenation of (2 << LOGNUMSYMBOLS) symbols
#    Each symbol is a sign-bit followed by (1 + LOGRADIX) bits
#################################################################
#x = getrandbits((2 << LOGNUMSYMBOLS) * (LOGRADIX + 2))
x = 4;
####################################################################################



a0 = 0x
a1 = 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d1cdc255d64adeae71167e4f636b34b0b6bc23c9fd7e0e8de5761c15c4932d7983e614ff700db6495d3feb242dffb3f056df0f6149345759e1bd1b3fe5d9ea92ba1e0e8f707c2cc20616e3211584f8fa21c5e86526df5583d796ed59bd12a10d97d8fd9181eea7281003e228c6472d510da2b8acbf597ea953a46215628cd99f5;
a2 = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000382b555a20be15a04d9b12ca36f4df84a2c229187ade94803b5e330c709efa95edf2f825441f31240fcfd6691f534518b8705b4367a8b663fd1dcfe1bcfd2e15d8eedc2319dc989eb31e62173c6da9166c33978fd431e3f283a54854a5d503bb2a12d0bd3e1e1625835745e7f8a48b8e74f9c94834c41d6edad0c41f51d1d4743e1e3c0b;
a3 = 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000029e7fa93983c9e2112a23c06c494526ade7113c54fa8948fd58282aace111c5bbc70030d47ccf470172f0fd58638b5e718ffea582dd8983f893115838ed2a041b505dd78ca672add122805b6a8b7a3552dbc468e7365239d044ea8544092ba2c63c4cecdec4ba7fa8ab7cdadbaf813167f3648dcaf9876dae3e26e01fa1d5de4780621d1;
a4 = 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000096b8da41b1b452d26532d50375a40a91a4819531ab7d752b8cecc9192f5a5ac2910e429bb0c8d599a06cd362d37db032daa23ae77577c032cd42b448aba92b6bbbef2b87804e81f6bb11f02b2093a867fec3bb12986a4d98393b0a182b2ca4f748085646485038754783a80301daed16726c442054dd5158267a16802a7b7dcc8fe8e28c;

print("a0 % M = ", hex(a0 % MODULUS));
print("a1 % M = ", hex(a1 % MODULUS));
print("a2 % M = ", hex(a2 % MODULUS));
print("a3 % M = ", hex(a3 % MODULUS));
print("a4 % M = ", hex(a4 % MODULUS));

print("a0^2 % M = ", hex((a0 * a0) % MODULUS));
print("a1^2 % M = ", hex((a1 * a1) % MODULUS));
print("a2^2 % M = ", hex((a2 * a2) % MODULUS));
print("a3^2 % M = ", hex((a3 * a3) % MODULUS));
print("a4^2 % M = ", hex((a4 * a4) % MODULUS));


print("a1^2 = ", hex(a1 * a1));
print("a1^2 = ", hex((a1 * a1) & ((1 << 4096)-1)));